/*
 * This file was generated by the Gradle 'init' task.
 */
buildscript {
    configurations {
        compileClasspath {
            resolutionStrategy.activateDependencyLocking()
        }
        runtimeClasspath {
            resolutionStrategy.activateDependencyLocking()
        }
        annotationProcessor {
            resolutionStrategy.activateDependencyLocking()
        }
    }
}


plugins {
    id 'java-library'
    id 'maven-publish'
    id 'org.springframework.boot'
    id "se.thinkcode.cucumber-runner"
    id 'org.gradle.crypto.checksum'
}



test {
    useJUnitPlatform()
}


repositories {
    mavenCentral()
    mavenLocal()
    maven {
        url = uri('https://repo.spring.io/snapshot')
    }

    maven {
        url = uri('https://oss.jfrog.org/artifactory/oss-snapshot-local')

        // allowInsecureProtocol = true
    }

    maven {
        url = uri('https://repo.spring.io/milestone')
    }

    maven {
        url = uri('https://repo.maven.apache.org/maven2/')
    }
}

dependencies {
    api Spring.boot.actuator
    api Spring.boot.data.jpa
    api Spring.boot.web
    api Spring.boot.hateoas
    api libs.springdoc.openapi.starter.webmvc.ui
   // api 'org.springdoc:springdoc-openapi-ui:_'
    api Spring.boot.validation
    runtimeOnly Spring.boot.devTools
    api libs.mysql.connector.java
    testImplementation(platform(libs.cucumber.bom))
    testImplementation(Testing.junit.jupiter)
    testImplementation(Testing.junit.jupiter.engine)
    testImplementation Spring.boot.test
    api libs.h2
    testImplementation libs.cucumber.java
    testImplementation libs.cucumber.spring

    testImplementation libs.cucumber.junit

    testImplementation(platform(Testing.junit.bom))
    testImplementation(platform(libs.cucumber.bom))

    testImplementation(libs.cucumber.junit.platform.engine)
    testImplementation(libs.junit.platform.suite)


}

group = 'com.in28minutes.springboot.rest.example'
version = '0.0.1-SNAPSHOT'
description = 'spring-boot-2-rest-service'

sourceCompatibility = 17
targetCompatibility = 17


publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.withType(Javadoc) {
    options.encoding = 'UTF-8'
}

configurations {
    cucumberRuntime {
        extendsFrom testImplementation
    }
    compileClasspath {
        resolutionStrategy.activateDependencyLocking()
    }
}




tasks.register('resolveAndLockAll') {
    notCompatibleWithConfigurationCache("Filters configurations at execution time")
    doFirst {
        assert gradle.startParameter.writeDependencyLocks
    }
    doLast {
        configurations.findAll {
            // Add any custom filtering on the configurations to be resolved
            it.canBeResolved
        }.each { it.resolve() }
    }
}




dependencyLocking {
    lockMode = LockMode.STRICT
}






